---
name: Build

on:
  push:
    branches:
      - chore/fix-FFZ-emotes-on-pronoun-build
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  C2_ENABLE_LTO: ${{ github.ref == 'refs/heads/chore/fix-FFZ-emotes-on-pronoun-build' }}
  CHATTERINO_REQUIRE_CLEAN_GIT: On
  C2_BUILD_WITH_QT6: Off

jobs:
  build:
    name: "Build ${{ matrix.os }}, Qt ${{ matrix.qt-version }} (PCH:${{ matrix.pch }}, LTO:${{ matrix.force-lto }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        qt-version: [5.15.2, 5.12.12]
        pch: [true]
        force-lto: [false]
        skip_artifact: ["no"]

    steps:
      - name: Force LTO
        if: matrix.force-lto == true
        run: |
          echo "C2_ENABLE_LTO=ON" >> "$GITHUB_ENV"
        shell: bash

      - name: Set Crashpad
        if: matrix.crashpad == true
        run: |
          echo "C2_ENABLE_CRASHPAD=ON" >> "$GITHUB_ENV"
        shell: bash

      - name: Set environment variables for windows-latest
        if: matrix.os == 'windows-latest'
        run: |
          echo "vs_version=2022" >> "$GITHUB_ENV"
        shell: bash

      - name: Set BUILD_WITH_QT6
        if: startsWith(matrix.qt-version, '6.')
        run: |
          echo "C2_BUILD_WITH_QT6=ON" >> "$GITHUB_ENV"
        shell: bash

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # allows for tags access

      - name: Install Qt5
        if: startsWith(matrix.qt-version, '5.')
        uses: jurplel/install-qt-action@v3.1.0
        with:
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-v2
          version: ${{ matrix.qt-version }}

      - name: Install Qt6
        if: startsWith(matrix.qt-version, '6.')
        uses: jurplel/install-qt-action@v3.1.0
        with:
          cache: true
          cache-key-prefix: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-v2
          modules: qt5compat
          version: ${{ matrix.qt-version }}

      # WINDOWS
      - name: Cache conan packages part 1
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ matrix.crashpad }}-conan-user-${{ hashFiles('**/conanfile.txt') }}
          path: ~/.conan/

      - name: Cache conan packages part 2
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ matrix.crashpad }}-conan-root-${{ hashFiles('**/conanfile.txt') }}
          path: C:/.conan/

      - name: Add Conan to path
        if: startsWith(matrix.os, 'windows')
        run: echo "C:\Program Files\Conan\conan\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install conan -y --version 1.58.0

      - name: Enable Developer Command Prompt
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: Setup Conan (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          conan profile new --detect --force default
          conan profile update conf.tools.cmake.cmaketoolchain:generator="NMake Makefiles" default

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          mkdir build
          cd build
          conan install .. -s build_type=RelWithDebInfo -b missing -pr:b=default
          cmake `
              -G"NMake Makefiles" `
              -DCMAKE_BUILD_TYPE=RelWithDebInfo `
              -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" `
              -DBUILD_WITH_CRASHPAD="$Env:C2_ENABLE_CRASHPAD" `
              -DCHATTERINO_LTO="$Env:C2_ENABLE_LTO" `
              -DBUILD_WITH_QT6="$Env:C2_BUILD_WITH_QT6" `
              ..
          set cl=/MP
          nmake /S /NOLOGO

      - name: Build crashpad (Windows)
        if: startsWith(matrix.os, 'windows') && matrix.crashpad
        run: |
          cd build
          set cl=/MP
          nmake /S /NOLOGO crashpad_handler
          mkdir Chatterino2/crashpad
          cp bin/crashpad/crashpad_handler.exe Chatterino2/crashpad/crashpad_handler.exe
          7z a bin/chatterino.pdb.7z bin/chatterino.pdb

      - name: Package (windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          cd build
          windeployqt bin/chatterino.exe --release --no-compiler-runtime --no-translations --no-opengl-sw --dir Chatterino2/
          cp bin/chatterino.exe Chatterino2/
          echo nightly > Chatterino2/modes
          7z a chatterino-windows-x86-64.zip Chatterino2/

      - name: Upload artifact (Windows - binary)
        if: startsWith(matrix.os, 'windows') && matrix.skip_artifact != 'yes'
        uses: actions/upload-artifact@v3
        with:
          name: chatterino-windows-x86-64-${{ matrix.qt-version }}.zip
          path: build/chatterino-windows-x86-64.zip

      - name: Upload artifact (Windows - symbols)
        if: startsWith(matrix.os, 'windows') && matrix.skip_artifact != 'yes'
        uses: actions/upload-artifact@v3
        with:
          name: chatterino-windows-x86-64-${{ matrix.qt-version }}-symbols.pdb.7z
          path: build/bin/chatterino.pdb.7z

      - name: Clean Conan pkgs
        if: startsWith(matrix.os, 'windows')
        run: conan remove "*" -fsb
        shell: bash

      # MACOS
      - name: Install dependencies (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install boost openssl rapidjson p7zip create-dmg cmake tree
        shell: bash

      - name: Build (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir build
          cd build
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \
              -DUSE_PRECOMPILED_HEADERS=${{ matrix.pch }} \
              -DCHATTERINO_LTO="$C2_ENABLE_LTO" \
              -DBUILD_WITH_QT6="$C2_BUILD_WITH_QT6" \
              ..
          make -j"$(sysctl -n hw.logicalcpu)"
        shell: bash

      - name: Package (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          ls -la
          pwd
          ls -la build || true
          cd build
          sh ./../.CI/CreateDMG.sh
        shell: bash

      - name: Upload artifact (MacOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v3
        with:
          name: chatterino-osx-${{ matrix.qt-version }}.dmg
          path: build/chatterino-osx.dmg

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/chore/fix-FFZ-emotes-on-pronoun-build')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # allows for tags access
      - uses: actions/download-artifact@v3
        with:
          name: chatterino-windows-x86-64-5.15.2.zip
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: chatterino-windows-x86-64-5.15.2-symbols.pdb.7z
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-x86_64-5.12.12.AppImage
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-ubuntu-20.04-Qt-5.12.12.deb
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: Chatterino-ubuntu-22.04-Qt-5.15.2.deb
          path: release-artifacts/

      - uses: actions/download-artifact@v3
        with:
          name: chatterino-osx-5.15.2.dmg
          path: release-artifacts/

      - name: Copy flatpakref
        run: |
          cp .CI/chatterino-nightly.flatpakref release-artifacts/
        shell: bash

      - name: Create release
        uses: ncipollo/release-action@v1.12.0
        with:
          removeArtifacts: true
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "release-artifacts/*"
          body: Old GabeEddyT/pronouns build(s) with fixed FFZ emotes
          prerelease: true
          name: Nightly Release
          tag: nightly-build-pronouns-fix

      - name: Update nightly-build tag
        run: |
          git tag -f nightly-build-pronouns-fix
          git push -f origin nightly-build-pronouns-fix
        shell: bash
